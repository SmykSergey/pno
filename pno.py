# -*- coding: utf-8 -*-
"""
/***************************************************************************
 serg
                                 A QGIS plugin
 qgis_pno
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by serg
        email                : serg
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pno_dialog import sergDialog
import os.path





class serg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'serg_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&pno')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('serg', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pno/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'pno'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&pno'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = sergDialog()
        self.dlg.cb_1.clear()
        self.dlg.cb_2.clear()
        self.dlg.cb_3.clear()
        self.dlg.cb_4.clear()
        self.dlg.cb_5.clear()
        self.dlg.cb_6.clear()
        self.dlg.cb_7.clear()
        self.dlg.cb_8.clear()
        self.dlg.cb_9.clear()
        self.dlg.cb_10.clear()
        self.dlg.cb_11.clear()
        self.dlg.cb_12.clear()
        self.dlg.cb_layer.clear()


#        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        layer_list = []
        for layer in layers:
            layer_list.append(layer.name())
        print(layer_list)
        self.dlg.cb_layer.addItems(layer_list)

#        self.dlg.pb_solve.clicked.connect(print("st"))

        print("qq")
        a_98 = "A-98"
        a_95 = "A-95"
        a_93 = "A-93"
        a_92 = "A-92"
        a_80 = "A-80"
        a_disell = "Dissel"

        type_fuel = [a_98, a_95, a_93, a_92, a_80, a_disell]

        self.dlg.cb_1.addItems(type_fuel)
        self.dlg.cb_2.addItems(type_fuel)
        self.dlg.cb_3.addItems(type_fuel)
        self.dlg.cb_4.addItems(type_fuel)
        self.dlg.cb_5.addItems(type_fuel)
        self.dlg.cb_6.addItems(type_fuel)
        self.dlg.cb_7.addItems(type_fuel)
        self.dlg.cb_8.addItems(type_fuel)
        self.dlg.cb_9.addItems(type_fuel)
        self.dlg.cb_10.addItems(type_fuel)
        self.dlg.cb_11.addItems(type_fuel)
        self.dlg.cb_12.addItems(type_fuel)

        def write_number():

            qt = self.dlg.tabWidget.currentIndex()
            print(qt)
            #string 1
            self.dlg.label_30.setText("6000")
            self.dlg.label_31.setText("6000")
            self.dlg.label_29.setText("6000")
            self.dlg.label_13.setText("6000")

            # string 2
            self.dlg.label_32.setText("49")
            self.dlg.label_33.setText("52")
            self.dlg.label_34.setText("55")
            self.dlg.label_19.setText("63")

            # string 3
            self.dlg.label_35.setText("65")
            self.dlg.label_36.setText("70")
            self.dlg.label_37.setText("68")
            self.dlg.label_20.setText("73")

            # string 4
            self.dlg.label_38.setText("95")
            self.dlg.label_39.setText("98")
            self.dlg.label_42.setText("101")
            self.dlg.label_21.setText("105")

            # string 5
            self.dlg.label_40.setText("200")
            self.dlg.label_41.setText("211")
            self.dlg.label_43.setText("203")
            self.dlg.label_22.setText("206")







        self.dlg.pb_solve.clicked.connect(write_number)


        def connect_weather():
            print("ff")

        self.dlg.bp_weather.clicked.connect(connect_weather)


#        self.dlg.cb_layer.clear()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass







#        self.dockwidget.show()